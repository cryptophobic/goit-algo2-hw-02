from __future__ import annotations
from typing import List, Dict, Tuple, Callable
import random

from exercise2 import optimize_printing


# ---------- –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∏ –≤—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö ----------

def gen_random_jobs(
    n: int,
    *,
    id_prefix: str = "M",
    vol_range: Tuple[int, int] = (20, 250),
    time_range: Tuple[int, int] = (30, 240),
    priorities: Tuple[int, ...] = (1, 2, 3),
    seed: int | None = 42
) -> List[Dict]:
    """–ü—Ä–æ—Å—Ç–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö –∑–∞–¥–∞—á."""
    if seed is not None:
        random.seed(seed)
    jobs = []
    for i in range(1, n + 1):
        jobs.append({
            "id": f"{id_prefix}{i}",
            "volume": random.randint(*vol_range),
            "priority": random.choice(priorities),
            "print_time": random.randint(*time_range),
        })
    return jobs

def build_edge_tests(constraints: Dict) -> Dict[str, List[Dict]]:
    """–ù–∞–±—ñ—Ä –ø–æ–∫–∞–∑–æ–≤–∏—Ö –ø–æ–≥—Ä–∞–Ω–∏—á–Ω–∏—Ö —Å—Ü–µ–Ω–∞—Ä—ñ—ó–≤ (—è–∫ —É QA)."""
    MAXV = constraints["max_volume"]
    MAXI = constraints["max_items"]

    # helpers
    def j(i, v, p, t): return {"id": f"M{i}", "volume": v, "priority": p, "print_time": t}

    tests = {}

    # 1) –†—ñ–≤–Ω—ñ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–∏, —Ç–æ—á–Ω–µ –ø–æ–ø–∞–¥–∞–Ω–Ω—è —É —Å—É–º–∞—Ä–Ω–∏–π –æ–±‚Äô—î–º (–æ–¥–Ω–∞ –ø–∞—Ä—Ç—ñ—è)
    #    –û–±‚Äô—î–º –¥–≤–æ—Ö –ø–µ—Ä—à–∏—Ö —Ä—ñ–≤–Ω–æ MAXV, —á–∞—Å –ø–∞—Ä—Ç—ñ—ó = max(120, 90)=120
    tests["exact_volume_fit"] = [
        j(1, MAXV - 150, 1, 120),
        j(2, 150,        1,  90),
    ]

    # 2) –°–ø–ª—ñ—Ç —á–µ—Ä–µ–∑ max_items (–¥–æ—Å—è–≥–ª–∏ –ª—ñ–º—ñ—Ç—É –∫—ñ–ª—å–∫–æ—Å—Ç—ñ, —Ö–∞–π –Ω–∞–≤—ñ—Ç—å —î –∑–∞–ø–∞—Å –ø–æ –æ–±‚Äô—î–º—É)
    base_v = max(1, MAXV // MAXI - 1)  # –Ω–µ–≤–µ–ª–∏—á–∫—ñ, —â–æ–± –æ–±‚Äô—î–º –Ω–µ –∑–∞–≤–∞–∂–∞–≤
    tests["split_by_item_limit"] = [
        j(1, base_v, 1, 50),
        j(2, base_v, 1, 60),
        j(3, base_v, 1, 70),  # –º–∞—î –ø—ñ—Ç–∏ —É –Ω–∞—Å—Ç—É–ø–Ω—É –ø–∞—Ä—Ç—ñ—é, —è–∫—â–æ MAXI=2
    ]

    # 3) –°–ø–ª—ñ—Ç —á–µ—Ä–µ–∑ –æ–±‚Äô—î–º (–ø–µ—Ä–µ–≤–∏—â—É—î–º–æ MAXV, —Ö–æ—á–∞ –ø–æ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —â–µ –º–æ–∂–Ω–∞)
    #    –ü–µ—Ä—à—ñ –¥–≤—ñ —Ä–∞–∑–æ–º > MAXV ‚Üí flush –ø–µ—Ä–µ–¥ –¥—Ä—É–≥–æ—é
    big = MAXV - 10
    tests["split_by_volume_limit"] = [
        j(1, big, 1, 80),
        j(2, 20,  1, 40),
        j(3, 30,  1, 30),
    ]

    # 4) –í–µ–ª–∏–∫–∞ –º–æ–¥–µ–ª—å —Ä—ñ–≤–Ω–æ MAXV + –¥—Ä—ñ–±–Ω—ñ –Ω–∞–≤–∫–æ–ª–æ (–∫–æ–∂–Ω–∞ –≤–µ–ª–∏–∫–∞ –∑–∞–π–º–∞—î –ø–∞—Ä—Ç—ñ—é —Å–∞–º–∞)
    tests["single_equals_max_volume"] = [
        j(1, MAXV, 1, 100),
        j(2, 10,   1,  30),
        j(3, 10,   1,  20),
    ]

    # 5) –ó–º—ñ—à–∞–Ω—ñ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–∏ (–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞, —â–æ 1-–∏ –π–¥—É—Ç—å –ø–µ—Ä–µ–¥ 2-–º–∏, –∞ 2-—ñ –ø–µ—Ä–µ–¥ 3-–º–∏)
    tests["mixed_priorities_ordering"] = [
        j(1, 100, 2, 120),
        j(2,  80, 1,  40),
        j(3,  50, 3,  60),
        j(4,  60, 1,  30),
    ]

    # 6) –ë–∞–≥–∞—Ç–æ –¥—Ä—ñ–±–Ω–∏—Ö ‚Äî –∫—ñ–ª—å–∫–∞ –ø–∞—Ä—Ç—ñ–π (—ñ –ø–æ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ, —ñ –ø–æ –æ–±‚Äô—î–º—É)
    unit_v = max(1, MAXV // (MAXI * 2))  # —Ç–∞–∫, —â–æ–± —É–º—ñ—â–∞–ª–æ—Å—å –¥–µ–∫—ñ–ª—å–∫–∞ –±–∞—Ç—á—ñ–≤
    tests["many_small_items"] = [
        j(i, unit_v, 1, 20 + i * 5) for i in range(1, 8)
    ]

    # 7) –û–¥–∏–Ω –µ–ª–µ–º–µ–Ω—Ç –ù–ï –≤–º—ñ—â—É—î—Ç—å—Å—è —Å–∞–º –ø–æ —Å–æ–±—ñ (–æ—á—ñ–∫—É—î–º–æ ValueError)
    tests["single_over_capacity"] = [j(1, MAXV + 1, 1, 100)]

    # 8) max_items == 1 (–¥–µ–≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω–∏–π —Ä–µ–∂–∏–º: —É—Å–µ –ø–æ–æ–¥–∏–Ω—Ü—ñ; —Å—É–º–∞ —á–∞—Å—ñ–≤)
    if MAXI >= 1:
        tests["degenerate_items_eq_1"] = [
            j(1, min(MAXV, 50), 1, 10),
            j(2, min(MAXV, 60), 1, 20),
            j(3, min(MAXV, 70), 1, 30),
        ]

    # 9) –°—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—å –ø–æ—Ä—è–¥–∫—É –ø—Ä–∏ –æ–¥–Ω–∞–∫–æ–≤–∏—Ö –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–∞—Ö —ñ —á–∞—Å–∞—Ö
    tests["stable_order_same_params"] = [
        j(1, 40, 1, 60),
        j(2, 40, 1, 60),
        j(3, 40, 1, 60),
    ]

    # 10) –ù–µ–≤–∞–ª—ñ–¥–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è volume/print_time (–æ—á—ñ–∫—É—î–º–æ ValueError)
    tests["invalid_values"] = [
        j(1, 0,   1, 10),
        j(2, -10, 1, 20),
        j(3, 30,  1,  0),
    ]

    return tests

# ---------- –í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó/–ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ ----------

def assert_valid_schedule(print_jobs: List[Dict], constraints: Dict, result: Dict, *, forbid_mixing: bool = True):
    ids = [j["id"] for j in print_jobs]
    id_to_job = {j["id"]: j for j in print_jobs}
    order = result["print_order"]
    total_time = result["total_time"]

    assert len(order) == len(ids), f"–î–æ–≤–∂–∏–Ω–∞ –ø–æ—Ä—è–¥–∫—É –Ω–µ –∑–±—ñ–≥–∞—î—Ç—å—Å—è: {len(order)} != {len(ids)}"
    assert set(order) == set(ids), f"–ù–∞–±–æ—Ä–∏ id —Ä—ñ–∑–Ω—ñ: {set(order)} vs {set(ids)}"

    max_volume = constraints["max_volume"]
    max_items = constraints["max_items"]

    cur_items = 0
    cur_vol = 0.0
    cur_tmax = 0
    recomputed_total = 0

    def flush():
        nonlocal cur_items, cur_vol, cur_tmax, recomputed_total
        if cur_items > 0:
            recomputed_total += cur_tmax
            cur_items = 0
            cur_vol = 0.0
            cur_tmax = 0

    prev_priority = None

    for mid in order:
        job = id_to_job[mid]

        # üîß –Ω–æ–≤–µ: –ø—Ä–∏–º—É—Å–æ–≤–∏–π flush –ø—Ä–∏ –∑–º—ñ–Ω—ñ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—É, —è–∫—â–æ –º—ñ–∫—Å –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ
        if forbid_mixing and prev_priority is not None and job["priority"] != prev_priority:
            flush()

        fits_items = (cur_items + 1) <= max_items
        fits_volume = (cur_vol + job["volume"]) <= max_volume
        if not (fits_items and fits_volume):
            flush()

        assert job["volume"] <= max_volume and max_items >= 1, "–û–∫—Ä–µ–º–µ –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –≤–º—ñ—â—É—î—Ç—å—Å—è –≤ –ø—Ä–∏–Ω—Ç–µ—Ä."

        cur_items += 1
        cur_vol += job["volume"]
        cur_tmax = max(cur_tmax, job["print_time"])
        prev_priority = job["priority"]

        if cur_items == max_items:
            flush()

    flush()

    assert recomputed_total == total_time, f"total_time –Ω–µ–∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–∏–π: {recomputed_total} != {total_time}"

    if forbid_mixing:
        pr = [id_to_job[i]["priority"] for i in order]
        assert all(pr[i] <= pr[i+1] for i in range(len(pr)-1)), f"–ü–æ—Ä—É—à–µ–Ω–æ –ø–æ—Ä—è–¥–æ–∫ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—ñ–≤: {pr}"

# ---------- –ó–∞–ø—É—Å–∫ –ø—Ä–∏–∫–ª–∞–¥—ñ–≤ —ñ fuzz ----------

def run_edge_tests(optimize_printing: Callable, constraints: Dict):
    tests = build_edge_tests(constraints)
    for name, jobs in tests.items():
        print(f"\n=== {name} ===")
        try:
            res = optimize_printing(jobs, constraints)
            print("–ü–æ—Ä—è–¥–æ–∫:", res["print_order"])
            print("–ß–∞—Å   :", res["total_time"])
            # –¥–ª—è –Ω–∞—à–∏—Ö –¥–µ–º–æ ‚Äî –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–∏ –Ω–µ –∑–º—ñ—à—É—é—Ç—å—Å—è
            if name not in ("single_over_capacity", "invalid_values"):
                assert_valid_schedule(jobs, constraints, res, forbid_mixing=True)
        except Exception as e:
            print("–í–∏–Ω—è—Ç–æ–∫:", type(e).__name__, str(e))

def run_fuzz(optimize_printing: Callable, iterations: int = 200, seed: int = 123):
    rnd = random.Random(seed)
    for it in range(1, iterations + 1):
        constraints = {
            "max_volume": rnd.randint(80, 400),
            "max_items": rnd.choice([1, 2, 3, 4])
        }
        n = rnd.randint(1, 10)
        jobs = gen_random_jobs(
            n,
            vol_range=(1, max(5, constraints["max_volume"])),
            time_range=(5, 240),
            priorities=(1, 2, 3),
            seed=rnd.randint(0, 10**9),
        )
        try:
            res = optimize_printing(jobs, constraints)
            assert_valid_schedule(jobs, constraints, res, forbid_mixing=True)
        except AssertionError as ae:
            print("\n[FUZZ FAIL @ iter", it, "]")
            print("constraints:", constraints)
            print("jobs:", jobs)
            raise
        except ValueError:
            # –æ–∫: –º–æ–∂–ª–∏–≤—ñ –∫–µ–π—Å–∏, –∫–æ–ª–∏ –æ–∫—Ä–µ–º–µ –∑–∞–≤–¥–∞–Ω–Ω—è > max_volume
            pass

if __name__ == "__main__":
    # –ü—ñ–¥—Å—Ç–∞–≤ —Ç—É—Ç —Å–≤–æ—é —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—é optimize_printing (—ñ–º–ø–æ—Ä—Ç –∞–±–æ –≤ —Ç–æ–º—É –∂ —Ñ–∞–π–ª—ñ).
    # –î–ª—è –¥–µ–º–æ ‚Äî —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Å—è constraints –∑ —É–º–æ–≤–∏:
    constraints = {"max_volume": 300, "max_items": 2}

    # –¢–≤–æ—ó –±–∞–∑–æ–≤—ñ 3 —Ç–µ—Å—Ç–∏ (—è–∫ —É –ø—Ä–∏–∫–ª–∞–¥—ñ –∑ —É–º–æ–≤–∏):
    test1_jobs = [
        {"id": "M1", "volume": 100, "priority": 1, "print_time": 120},
        {"id": "M2", "volume": 150, "priority": 1, "print_time": 90},
        {"id": "M3", "volume": 120, "priority": 1, "print_time": 150},
    ]
    test2_jobs = [
        {"id": "M1", "volume": 100, "priority": 2, "print_time": 120},
        {"id": "M2", "volume": 150, "priority": 1, "print_time": 90},
        {"id": "M3", "volume": 120, "priority": 3, "print_time": 150},
    ]
    test3_jobs = [
        {"id": "M1", "volume": 250, "priority": 1, "print_time": 180},
        {"id": "M2", "volume": 200, "priority": 1, "print_time": 150},
        {"id": "M3", "volume": 180, "priority": 2, "print_time": 120},
    ]

    # –ü—Ä–∏–∫–ª–∞–¥–∏ –∑–∞–ø—É—Å–∫—É:
    res1 = optimize_printing(test1_jobs, constraints); print(res1)
    res2 = optimize_printing(test2_jobs, constraints); print(res2)
    res3 = optimize_printing(test3_jobs, constraints); print(res3)

    # Edge-—Ç–µ—Å—Ç–∏:
    run_edge_tests(optimize_printing, constraints)

    # Fuzz:
    run_fuzz(optimize_printing, iterations=500)
